generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  MatchReport   MatchReport[]
  Registration  Registration[]
  sessions      Session[]
  tournaments   Tournament[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id                                     String         @id @default(uuid())
  disciplineId                           String
  name                                   String         @db.VarChar(30)
  full_name                              String?        @db.VarChar(80)
  description                            String?
  rules                                  String?
  status                                 String         @default("pending")
  participant_type                       String
  organization                           String?
  contact                                String?
  discord                                String?
  website                                String?
  online                                 Boolean?
  location                               String?
  country                                String?
  size                                   Int
  prize                                  String?
  scheduled_date_start                   String?
  scheduled_date_end                     String?
  timezone                               String
  public                                 Boolean?
  platforms                              String[]
  featured                               Boolean        @default(false)
  archived                               Boolean        @default(false)
  match_report_enabled                   Boolean        @default(false)
  registration_enabled                   Boolean        @default(false)
  registration_opening_datetime          String?
  registration_closing_datetime          String?
  registration_auto_accept               Boolean        @default(false)
  registration_notification_enabled      Boolean        @default(false)
  registration_participant_email_enabled Boolean        @default(false)
  registration_request_message           String?
  registration_acceptance_message        String?
  registration_refusal_message           String?
  registration_terms_enabled             Boolean        @default(false)
  registration_terms_url                 String?
  registration_permanent_team_mandatory  Boolean        @default(false)
  check_in_enabled                       Boolean        @default(false)
  check_in_participant_enabled           Boolean        @default(false)
  check_in_participant_start_datetime    String?
  check_in_participant_end_datetime      String?
  team_min_size                          Int
  team_max_size                          Int
  created_at                             DateTime       @default(now())
  userId                                 String
  Bracket                                Bracket[]
  Group                                  Group[]
  Match                                  Match[]
  MatchReport                            MatchReport[]
  participants                           Participant[]
  Ranking                                Ranking[]
  Registration                           Registration[]
  Round                                  Round[]
  Stage                                  Stage[]
  discipline                             Discipline     @relation(fields: [disciplineId], references: [id])
  user                                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Discipline {
  id                  String       @id
  name                String
  short_name          String
  copyrights          String
  platforms_available String[]
  teamsize            Json
  Tournament          Tournament[]
}

model Registration {
  id                     String      @id @default(uuid())
  tournamentId           String
  participantId          String
  userId                 String
  custom_user_identifier String?     @db.VarChar(100)
  email                  String?     @db.VarChar(180)
  type                   String
  status                 String      @default("pending")
  name                   String      @db.VarChar(40)
  custom_fields          Json
  created_at             DateTime    @default(now())
  lineup                 Json[]
  participant            Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  tournament             Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Participant {
  id                     String         @id @default(uuid())
  email                  String?        @db.VarChar(180)
  name                   String         @db.VarChar(40)
  user_id                String?
  custom_user_identifier String?        @db.VarChar(100)
  checked_in             Boolean        @default(false)
  created_at             DateTime       @default(now())
  type                   String         @default("team")
  tournamentId           String
  lineup                 Json[]
  MatchReport            MatchReport[]
  tournament             Tournament     @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  Registration           Registration[]
}

model Stage {
  id                     String     @id @default(uuid())
  tournamentId           String
  number                 Int
  name                   String     @db.VarChar(30)
  type                   String
  closed                 Boolean    @default(false)
  settings               Json
  match_settings         Json?
  auto_placement_enabled Boolean    @default(false)
  Bracket                Bracket[]
  Group                  Group[]
  Match                  Match[]
  Ranking                Ranking[]
  Round                  Round[]
  tournament             Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Group {
  id             String     @id @default(uuid())
  stageId        String
  number         Int
  name           String     @db.VarChar(30)
  closed         Boolean    @default(false)
  settings       Json
  match_settings Json
  tournamentId   String
  Bracket        Bracket[]
  stage          Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  tournament     Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  Match          Match[]
  Ranking        Ranking[]
  Round          Round[]
}

model Round {
  id             String     @id @default(uuid())
  stageId        String
  groupId        String
  tournamentId   String
  number         Int
  name           String     @db.VarChar(30)
  closed         Boolean    @default(false)
  settings       Json
  match_settings Json
  Bracket        Bracket[]
  Match          Match[]
  group          Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  stage          Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  tournament     Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Bracket {
  id                 String     @id @default(uuid())
  tournamentId       String
  stageId            String
  groupId            String
  roundId            String
  number             Int
  type               String
  status             String     @default("pending")
  scheduled_datetime DateTime?
  played_at          DateTime?
  depth              Int
  branch             String?
  opponents          Json[]
  group              Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  round              Round      @relation(fields: [roundId], references: [id], onDelete: Cascade)
  stage              Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  tournament         Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Ranking {
  id           String     @id @default(uuid())
  groupId      String
  number       Int
  position     Int
  rank         Int?
  participant  Json
  points       Int
  properties   Json
  tournamentId String
  stageId      String
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  stage        Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Match {
  id                 String        @id @default(uuid())
  stageId            String
  groupId            String
  roundId            String
  number             Int
  type               String
  status             String        @default("pending")
  settings           Json
  scheduled_datetime DateTime?
  played_at          String?
  public_note        String?
  private_note       String?
  report_closed      Boolean       @default(false)
  report_status      String?       @default("report")
  opponents          Json[]
  tournamentId       String
  group              Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  round              Round         @relation(fields: [roundId], references: [id], onDelete: Cascade)
  stage              Stage         @relation(fields: [stageId], references: [id], onDelete: Cascade)
  tournament         Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  MatchReport        MatchReport[]
}

model MatchGame {
  id         String @id @default(uuid())
  status     String @default("pending")
  opponents  Json[]
  properties Json
}

model MatchReport {
  id            String      @id @default(uuid())
  participantId String
  type          String      @default("report")
  report        Json
  closed        Boolean     @default(false)
  closed_at     DateTime?
  note          String?
  userId        String?
  tournamentId  String
  matchId       String
  match         Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  tournament    Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  User          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
